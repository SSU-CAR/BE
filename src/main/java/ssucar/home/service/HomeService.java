package ssucar.home.service;


import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import ssucar.driving.dto.DrivingDto;
import ssucar.driving.dto.SummaryDto;
import ssucar.driving.entity.Report;
import ssucar.driving.entity.Summary;
import ssucar.driving.repository.ReportRepository;
import ssucar.driving.service.DrivingService;
import ssucar.exception.BusinessLogicException;
import ssucar.exception.ExceptionCode;
import ssucar.home.dto.HomeDto;
import ssucar.home.dto.ScoreDto;
import ssucar.scenario.entity.Scenario;
import ssucar.scenario.repository.ScenarioRepository;
import java.util.stream.Collectors;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.Collectors;

import static java.util.Arrays.stream;

@Service
@RequiredArgsConstructor
public class HomeService {

    @Autowired
    private final DrivingService drivingService;

    @Autowired
    private final ReportRepository reportRepository;

    @Autowired
    private final ScenarioRepository scenarioRepository;


    public HomeDto.scoreResponse getLatestScore() {
        int reportItems = drivingService.reportItems();
        Report latestReport = drivingService.findReport(reportItems);

        return new HomeDto.scoreResponse(latestReport.getScore());
    }

    public HomeDto.scoresResponse getLatestScores() {
        List<ScoreDto> scores = reportRepository.findTop3ByOrderByReportIdDesc()
                .stream()
                .map(report -> new ScoreDto(report.getReportId(), report.getScore()))
                .collect(Collectors.toList());
        while (scores.size() < 3) {
            scores.add(new ScoreDto(0, 0));
        }

        scores.sort(Comparator.comparingInt(ScoreDto::getReportId));
        return new HomeDto.scoresResponse().builder().scores(scores).build();
    }

    public HomeDto.feedbackResponse getHomeFeedback() {
        String homeFeedback = "Ï∞®ÏÑ† Î≥ÄÍ≤ΩÏóê Ï¢Ä Îçî Ïã†Í≤ΩÏç®Î¥ÖÏãúÎã§üòâ";

        List<Report> latestReports = reportRepository.findByOrderByReportIdDesc();
        Map<Integer, Integer> summaryCountMap = latestReports.stream()
                .flatMap(report -> report.getSummaries().stream())
                .collect(Collectors.groupingBy(Summary::getScenarioType,
                        Collectors.summingInt(Summary::getSummaryCount)));
        List<SummaryDto> recentRisks = summaryCountMap.entrySet().stream()
                .sorted(Map.Entry.<Integer, Integer>comparingByValue().reversed())
                .limit(3)
                .map(entry -> {
                    Optional<Scenario> optionalScenario = scenarioRepository.findById(entry.getKey());
                    Scenario scenario = optionalScenario.orElseThrow(() -> new BusinessLogicException(ExceptionCode.SCENARIO_NOT_FOUND));
                    return SummaryDto.builder()
                            .scenarioType(entry.getKey())
                            .scenarioName(scenario.getName())
                            .scenarioCount(entry.getValue())
                            .build();
                })
                .toList();


        if(drivingService.reportItems()<3) homeFeedback = "Îçî ÎßéÏùÄ Ï£ºÌñâ Îç∞Ïù¥ÌÑ∞Î•º ÏåìÏïÑ Ïö¥Ï†Ñ ÏäµÍ¥Ä ÌîºÎìúÎ∞±ÏùÑ Î∞õÏïÑÎ≥¥ÏÑ∏Ïöî";
        else if(reportRepository.findAll().stream()
                .sorted(Comparator.comparingInt(Report::getReportId).reversed())
                .limit(3)
                .toList().stream()
                .flatMap(report -> report.getSummaries().stream()) // Í∞Å ReportÏùò Summary Î¶¨Ïä§Ìä∏Î•º ÌèâÎ©¥Ìôî
                .filter(summary -> summary.getScenarioType() == 3) // scenarioTypeÏù¥ 3Ïù∏ Í≤ÉÎì§Îßå ÌïÑÌÑ∞ÎßÅ
                .mapToInt(Summary::getSummaryCount) // summaryCountÎßå Ï∂îÏ∂ú
                .sum()>=2) homeFeedback = "Ï°∏ÏùåÏö¥Ï†ÑÌïòÎã§ ÏòÅÏõêÌûà Ïû†Îì≠ÎãàÎã§..üíÄ\n Ï°∏Ïùå ÏâºÌÑ∞Î•º Ïûò Ïù¥Ïö©Ìï¥Î¥êÏöî!";
        else if(recentRisks.get(0).getScenarioCount()>10) homeFeedback = recentRisks.get(0).getScenarioName() + "Îäî ÌäπÎ≥ÑÌûà Îçî Ï£ºÏùòÍ∞Ä ÌïÑÏöîÌï¥Ïöîü§îü§®";
        else if(latestReports.subList(0, Math.min(latestReports.size(), 3)).stream()
                .anyMatch(report -> report.getScore() <= 50)) homeFeedback = "ÏïàÏ†ÑÌïòÍ≤å Ïö¥Ï†ÑÌïòÎäîÍ≤å Î≤†Ïä§Ìä∏ ÎìúÎùºÏù¥Î≤Ñ!üò°";
        return new HomeDto.feedbackResponse(homeFeedback);
    }

    public HomeDto.risksResponse getRisks() {
        List<Report> latestReports = reportRepository.findTop3ByOrderByReportIdDesc();

        // Í∞Å ReportÏóê ÎåÄÌïú scenarioTypeÎ≥Ñ summaryCount Ìï©ÏÇ∞
        Map<Integer, Integer> summaryCountMap = latestReports.stream()
                .flatMap(report -> report.getSummaries().stream())
                .collect(Collectors.groupingBy(Summary::getScenarioType,
                        Collectors.summingInt(Summary::getSummaryCount)));

        // ÏÉÅÏúÑ 3Í∞ú summaryCount Ìï≠Î™© Ï∂îÏ∂ú
        List<SummaryDto> recentRisks = summaryCountMap.entrySet().stream()
                .sorted(Map.Entry.<Integer, Integer>comparingByValue().reversed())
                .limit(3)
                .map(entry -> {
                    Optional<Scenario> optionalScenario = scenarioRepository.findById(entry.getKey());
                    Scenario scenario = optionalScenario.orElseThrow(() -> new BusinessLogicException(ExceptionCode.SCENARIO_NOT_FOUND));
                    return SummaryDto.builder()
                            .scenarioType(entry.getKey())
                            .scenarioName(scenario.getName())
                            .scenarioCount(entry.getValue())
                            .build();
                })
                .collect(Collectors.toList());

        return HomeDto.risksResponse.builder()
                .recentRisks(recentRisks)
                .build();
    }
}
